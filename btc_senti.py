# -*- coding: utf-8 -*-
"""BTC_senti.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15gvOkmPCSSYLjTCPzJSac3Q1rx3bGSP0
"""

#Description: Crypto Sentimental Analysis

#Import Libraries
from tweepy.streaming import StreamListener
import tweepy
from textblob import TextBlob
import pandas as pd
import numpy as np
from wordcloud import WordCloud
import re
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#CREDENTIALS FROM TWITTER'S DEVELOPER'S ACCOUNT
access_token = "870981368712318976-y3m7s6HcrIZObKgNwAiYoH3cn0jcg1o"
access_token_secret = "Swhx1wCgFxFHhLid2gra0KEJiYjIIZCQcvYddHaXqQxmi"
consumer_key = "Consumer Key"
consumer_secret = "Secret Key"

#Create the authentication object
authenticate = tweepy.OAuthHandler(consumer_key, consumer_secret)
#Set the access token and the access token secret
authenticate.set_access_token(access_token, access_token_secret)
#Create the API object
api=tweepy.API(authenticate, wait_on_rate_limit=True)

#Gather 1000 the tweets 
search_term= 'bitcoin -filter:retweets'
#Create a cursor object
tweets = tweepy.Cursor(api.search, q=search_term, lang='en', since= '2022-01-01', tweet_mode= 'extended').items(10000)
#Store the tweets in a variable anf get the full text
all_tweets=[tweet.full_text for tweet in tweets]

columns = ['tweets']

data = []
for tweet in tweets:
  data.append([tweet.full_text])

#Create a dataframe to store the tweets with a column called 'Tweets'
df=pd.DataFrame(all_tweets, columns=['Tweets'])

#Show the first 100 rows of data
df.head(10000)

#Function for cleaning the Tweets
def cleanTwt(twt):
  twt = re.sub('#bitcoin','bitcoin', twt ) #Removes the # from bitcoin
  twt = re.sub('# Bitcoin', 'Bitcoin', twt) #Removes # from Bitcoin
  twt = re.sub('#[A-Za-z0-9]+', '', twt) #Removes any strings with a '#' in it
  twt = re.sub('\\n', '',twt ) #Removes the '/n' string
  twt = re.sub('https?:\/\/\S+', '', twt) #Removes any hyperlinks
  return twt

#Uncleaned Vs Cleaned the tweets
df['Cleaned_Tweets'] = df['Tweets'].apply(cleanTwt)
#Show the data set
df.head(4)

#create a function to get the subjectivity
def getSubjectivity(twt):
  return TextBlob(twt).sentiment.subjectivity

#create a function to get the polarity
def getPolarity(twt):
  return TextBlob(twt).sentiment.polarity


#create two new columns called subjectivity and polarity
df['Subjectivity'] = df['Cleaned_Tweets'].apply(getSubjectivity)
df['Polarity']= df['Cleaned_Tweets'].apply(getPolarity)

#show the data
df.head()

#create a function to get the sentiment text
def getSentiment(score):
  if score < 0:
    return 'Negative'
  elif score == 0:
    return 'Neutral'
  else:
    return 'Positive'

#Create a column to store the text sentiment
df['Sentiment'] = df['Polarity'].apply(getSentiment)
#show the data
df.head()

#create a scatter plot to show the subjectivity and the polarity
plt.figure(figsize=(8,6))
for i in range(0,df.shape[0]):
  plt.scatter(df['Polarity'][i],df['Subjectivity'][i],color='Purple')
plt.title('Sentiment Analysis Scatter Plot')
plt.xlabel('Polarity')
plt.ylabel('Subjectivity')
plt.show()

#create a chart to show the count of positive,neutral and negative 
df['Sentiment'].value_counts().plot(kind='pie')
plt.title('Sentiment Analysis Bar Plot')
plt.xlabel('Sentiment')
plt.ylabel('Number of Tweets')
plt.show()